<?xml version="1.0" encoding="utf-8" ?>
<Config>
  <!-- Definitions of namespace prefixes which can be used in SPARQL patterns and conflict resolution settings (optional) -->
  <!-- Prefix definitions are also used in output files. It is recommended to define namespace prefixes here in order to reduce their size. -->
  <Prefixes>
    <Prefix id="rdf" namespace="http://www.w3.org/1999/02/22-rdf-syntax-ns#" />
    <Prefix id="rdfs" namespace="http://www.w3.org/2000/01/rdf-schema#" />
    <Prefix id="xsd" namespace="http://www.w3.org/2001/XMLSchema#" />
    <Prefix id="owl" namespace="http://www.w3.org/2002/07/owl#" />
    <Prefix id="odcs" namespace="http://opendata.cz/infrastructure/odcleanstore/" />
  </Prefixes>
  
  <!-- Definitions of data sources; multiple <DataSource> children can be given; (required) -->
  <DataSources>
    <!-- Data source of type "virtuoso"; connects to an Openlink Virtuoso database instance using JDBC -->
    <DataSource type="virtuoso" name="virtuoso_local">
      <!-- Hostname for the Virtuoso database instance; (required) -->
      <Param name="host" value="localhost" />
    
      <!-- Connection port; (required) -->
      <Param name="port" value="1111" />
    
      <!-- Connection username; (required) -->
      <Param name="username" value="dba" />
    
      <!-- Connection password; (required) -->
      <Param name="password" value="dba" />
      
      <!-- SPARQL group graph pattern which limits named graphs from which data to process are obtained;
           attribute var specifies which variable represents the named graph in the pattern;
           optional (if not given, all data are processed) -->
      <GraphRestriction var="g">
        { SELECT ?g WHERE {?g odcs:metadataGraph ?m} }
        UNION { SELECT ?g WHERE {?a odcs:attachedGraph ?g} }
      </GraphRestriction>
    
      <!-- SPARQL group graph pattern which specifies named graphs from which metadata and 
           owl:sameAs links are loaded; contents of these graphs are considered in conflict resolution
           (e.g. owl:sameAs links for identity resolution) but contents are not included in the output;
           attribute var specifies which variable represents the named graph in the pattern;
          optional (if not given, statements about named graphs containing data to process are loaded) -->
      <MetadataGraphRestriction var="m">
        { GRAPH ?m {?x ?p ?y FILTER (?p IN (odcs:score, odcs:publisherScore, odcs:source))} }
        UNION { ?m odcs:generatedGraph 1 }
      </MetadataGraphRestriction>
    </DataSource>

     <!-- Data source representing a SPARQL endpoint -->    
    <DataSource type="sparql">
      <!-- URL of the SPARQL endpoint; (required)) -->
      <Param name="endpointUrl" value="http://localhost:8890/sparql" />
      
      <!-- <GraphRestriction /> and <MetadataGraphRestriction /> can optionally be used here as well -->
    </DataSource>
    
    <!-- Data source loading RDF data from a file -->
    <DataSource type="file">
      <!-- Path to the source file; (required) -->
      <Param name="path" value="data.rdf" />
      
      <!-- Base URI for loaded data; (optional, defaults is URI representing the file) -->
      <Param name="baseuri" value="http://example.com" />
      
      <!-- Serialization format of the file; accepted values are 'ntriples', 'trig' and 'rdf/xml';
          (optional, format is recognized from file extension if not given) -->
      <Param name="format" value="ntriples"/>
    </DataSource>
  </DataSources>
  
  <!-- Definition of data processing settings; (optional) -->
  <DataProcessing>
    <!-- Path to file where all canonical URIs after conflict resolution are written, one URI per line; (optional) -->
    <Param name="canonicalUriOutputFile" value="output/canonicalUris.txt" />
      
    <!-- Path to file which contains URIs preferred for canonical URIs, one URI per line; (optional) -->
    <Param name="canonicalUriInputFile" value="output/canonicalUris.txt" />
      
    <!-- Maximum number of triples in the result; Conflict Resolution will stop after the given number 
         of triples is reached (useful e.g. when you just need to test your CR settings); (optional) -->
    <!--<Param name="maxOutputTriples" value="1000" />-->
      
    <!-- If set to true, enables file cache for objects needed by the algorithm that may not fit in the memory;
           disabling this option increases performance but may cause OutOfMemory errors; (optional, defaults to false) -->
    <Param name="enableFileCache" value="false" />
    
    <!-- SPARQL group graph pattern giving seed resources for transitive traversal of triples;
         the output will include triples having matching resources as their subjects and
         triples transitively reachable from there;
         attribute var specifies which variable in the pattern represents the seed resource;
         optional (if not given, all triples from source graphs are processed) -->
    <SeedResourceRestriction var="s">
      ?s rdf:type &lt;http://purl.org/procurement/public-contracts#Contract&gt; 
    </SeedResourceRestriction>
  </DataProcessing>      
  
  <!-- Definition of conflict resolution settings (optional) -->
  <ConflictResolution>
    <!-- Spefifies the default conflict resolution policy; (optional);
         'function' attribute defines the conflict resolution function (optional attribute, defaults to ALL),
         'cardinality' attribute defines the expected cardinality of the property - possible values are 'MANYVALUED' and 'SINGLEVALUED'
		        (optional, default to MANYVALUED),
         'aggregationErrroStrategy' defines the aggregation error strategy - possible values are 'IGNORE' and 'RETURN_ALL'
               (optional, defaults to RETURN_ALL)
          <Param name="..." value="..." /> optional subelements define additional parameters for the resolution function -->
    <DefaultStrategy function="ALL" cardinality="MANYVALUED" aggregationErrorStrategy="RETURN_ALL" />
    
    <!-- <ResolutionStrategy> elements specify a conflict resolution policy:
         'function' attribute defines the conflict resolution method (optional attribute, defaults to ALL),
          'cardinality' attribute defines the expected cardinality of the property - possible values are 'MANYVALUED' and 'SINGLEVALUED'
		        (optional, default to MANYVALUED),
         'aggregationErrorStrategy' defines the aggregation error strategy - possible values are 'IGNORE' and 'RETURN_ALL'
              (optional, default to RETURN_ALL)
         <Param name="..." value="..." /> optional subelements define additional parameters for the resolution function -->
    <ResolutionStrategy function="AVG" cardinality="SINGLEVALUED">
      <!-- Definition of properties to which the resolution strategy applies to -->
      <Property id="http://rdf.freebase.com/ns/location.geocode.longtitude"/>
      <Property id="http://rdf.freebase.com/ns/location.geocode.latitude" />
    </ResolutionStrategy>
    <ResolutionStrategy function="BEST">
      <Property id="rdfs:label"/>
    </ResolutionStrategy>
  </ConflictResolution>
  
  <!-- Definitions of where the output shall be written; multiple <Output> children may be given; (required) -->
  <Outputs>
    <!-- Definition of output to a file -->
    <Output type="file" name="n3-output">
      <!-- Path to the output file (required) -->
      <Param name="path" value="output/out.n3"/>
      
      <!-- Format of the output file; accepted values are 'ntriples', 'trig' and 'rdf/xml'; (required) -->
      <Param name="format" value="ntriples"/>
      
      <!-- If set, output will be split into files with the given maximum size in megabytes; n-th file will have suffix -n; (optional) -->
      <Param name="splitByMB" value="200"/>
      
      <!-- Path to file where owl:sameAs links used in conflict resolution shall be written (optional) -->
      <Param name="sameAsFile" value="output/sameAsLinks.n3"/>
      
      <!-- URI of named graph where Conflict Resolution metadata will be placed in the output;
           applicable only for output formats which support named graphs (e.g. TriG);
           (optional; if ommitted, no metadata will be written; use only if dataContext is not set) -->
      <Param name="metadataContext" value="http://opendata.cz/infrastructure/odcleanstore/metadata" />
      
      <!-- URI of named graph where resolved quads will be placed in the output;
           applicable only for output formats which support named graphs (e.g. TriG);
           if set, no metadata will be written (overrides metadataContext parameter);
           (optional; if ommitted, each quad is placed in a unique named graph) -->
      <!--<Param name="dataContext" value="http://opendata.cz/infrastructure/odcleanstore/result" />-->
    </Output>
    
    <!-- Definition of output to a Virtuoso database instance using Virtuoso SPARQL endpoint
	     Note that Virtuoso isn't compatible with the standard SPARQL endpoint -->
    <Output type="virtuoso">
      <!-- URL of the SPARQL endpoint; (required)) -->
      <Param name="endpointUrl" value="http://localhost:8890/sparql-auth" />
      
      <!-- Connection username; the user account needs SPARQL Update permission (optional) -->
      <Param name="username" value="dba" />
    
      <!-- Connection password; (optional) -->
      <Param name="password" value="dba" />
      
      <!-- URI of named graph where Conflict Resolution metadata will be placed in the output;
           (optional; if ommitted, no metadata will be written; use only if dataContext is not set) -->
      <!--<Param name="metadataContext" value="http://opendata.cz/infrastructure/odcleanstore/metadata" />-->
      
      <!-- URI of named graph where resolved quads will be placed in the output;
           if set, no metadata will be written (overrides metadataContext parameter);
           (optional; if ommitted, each quad is placed in a unique named graph) -->
      <Param name="dataContext" value="http://opendata.cz/infrastructure/odcleanstore/result" />
    </Output>

     <!-- Definition of output to a SPARQL endpoint -->    
    <Output type="sparql">
      <!-- URL of the SPARQL endpoint; (required)) -->
      <Param name="endpointUrl" value="http://localhost:8890/sparql-auth" />
      
      <!-- Connection username; the user account needs SPARQL Update permission (optional) -->
      <Param name="username" value="dba" />
    
      <!-- Connection password; (optional) -->
      <Param name="password" value="dba" />
      
      <!-- URI of named graph where Conflict Resolution metadata will be placed in the output;
           (optional; if ommitted, no metadata will be written; use only if dataContext is not set) -->
      <!--<Param name="metadataContext" value="http://opendata.cz/infrastructure/odcleanstore/metadata" />-->
      
      <!-- URI of named graph where resolved quads will be placed in the output;
           if set, no metadata will be written (overrides metadataContext parameter);
           (optional; if ommitted, each quad is placed in a unique named graph) -->
      <Param name="dataContext" value="http://opendata.cz/infrastructure/odcleanstore/result" />
    </Output>
  </Outputs>
</Config>
